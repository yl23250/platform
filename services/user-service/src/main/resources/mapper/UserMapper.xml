<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.biobt.user.mapper.UserMapper">

    <!-- 用户结果映射 -->
    <resultMap id="UserResultMap" type="com.biobt.user.domain.entity.User">
        <id column="id" property="id"/>
        <result column="tenant_id" property="tenantId"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="real_name" property="realName"/>
        <result column="nickname" property="nickname"/>
        <result column="avatar" property="avatar"/>
        <result column="gender" property="gender"/>
        <result column="birthday" property="birthday"/>
        <result column="status" property="status"/>
        <result column="lock_status" property="lockStatus"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="last_login_ip" property="lastLoginIp"/>
        <result column="login_count" property="loginCount"/>
        <result column="password_update_time" property="passwordUpdateTime"/>
        <result column="remarks" property="remarks"/>
        <result column="create_by" property="createBy"/>
        <result column="create_time" property="createTime"/>
        <result column="update_by" property="updateBy"/>
        <result column="update_time" property="updateTime"/>
        <result column="deleted" property="deleted"/>
        <result column="version" property="version"/>
    </resultMap>

    <!-- 用户带角色结果映射 -->
    <resultMap id="UserWithRolesResultMap" type="java.util.Map">
        <id column="user_id" property="userId"/>
        <result column="username" property="username"/>
        <result column="real_name" property="realName"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="role_ids" property="roleIds"/>
        <result column="role_names" property="roleNames"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        id, tenant_id, username, password, email, phone, real_name, nickname, avatar,
        gender, birthday, status, lock_status, last_login_time, last_login_ip, login_count,
        password_update_time, remarks, create_by, create_time, update_by, update_time, deleted, version
    </sql>

    <!-- 分页查询用户列表 -->
    <select id="selectUserPage" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE deleted = 0
        <if test="request.tenantId != null">
            AND tenant_id = #{request.tenantId}
        </if>
        <if test="request.username != null and request.username != ''">
            AND username LIKE CONCAT('%', #{request.username}, '%')
        </if>
        <if test="request.email != null and request.email != ''">
            AND email LIKE CONCAT('%', #{request.email}, '%')
        </if>
        <if test="request.phone != null and request.phone != ''">
            AND phone LIKE CONCAT('%', #{request.phone}, '%')
        </if>
        <if test="request.realName != null and request.realName != ''">
            AND real_name LIKE CONCAT('%', #{request.realName}, '%')
        </if>
        <if test="request.nickname != null and request.nickname != ''">
            AND nickname LIKE CONCAT('%', #{request.nickname}, '%')
        </if>
        <if test="request.gender != null">
            AND gender = #{request.gender}
        </if>
        <if test="request.status != null">
            AND status = #{request.status}
        </if>
        <if test="request.lockStatus != null">
            AND lock_status = #{request.lockStatus}
        </if>
        <if test="request.createTimeStart != null">
            AND create_time >= #{request.createTimeStart}
        </if>
        <if test="request.createTimeEnd != null">
            AND create_time &lt;= #{request.createTimeEnd}
        </if>
        <choose>
            <when test="request.sortField != null and request.sortField != ''">
                ORDER BY ${request.sortField}
                <if test="request.sortDirection != null and request.sortDirection != ''">
                    ${request.sortDirection}
                </if>
            </when>
            <otherwise>
                ORDER BY create_time DESC
            </otherwise>
        </choose>
    </select>

    <!-- 查询用户详情（包含角色信息） -->
    <select id="selectUserWithRoles" resultMap="UserWithRolesResultMap">
        SELECT 
            u.id as user_id,
            u.username,
            u.real_name,
            u.email,
            u.phone,
            GROUP_CONCAT(DISTINCT r.id) as role_ids,
            GROUP_CONCAT(DISTINCT r.role_name) as role_names
        FROM sys_user u
        LEFT JOIN sys_user_role ur ON u.id = ur.user_id
        LEFT JOIN sys_role r ON ur.role_id = r.id AND r.deleted = 0
        WHERE u.id = #{userId} AND u.deleted = 0
        GROUP BY u.id
    </select>

    <!-- 查询用户权限列表 -->
    <select id="selectUserPermissions" resultType="java.lang.String">
        SELECT DISTINCT p.permission_code
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id AND r.deleted = 0 AND r.status = 1
        INNER JOIN sys_role_permission rp ON r.id = rp.role_id
        INNER JOIN sys_permission p ON rp.permission_id = p.id AND p.deleted = 0 AND p.status = 1
        WHERE u.id = #{userId} AND u.deleted = 0 AND u.status = 1
    </select>

    <!-- 根据用户名查询用户（包括已删除的） -->
    <select id="selectByUsernameIncludeDeleted" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE username = #{username}
        LIMIT 1
    </select>

    <!-- 根据邮箱查询用户（包括已删除的） -->
    <select id="selectByEmailIncludeDeleted" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE email = #{email}
        LIMIT 1
    </select>

    <!-- 根据手机号查询用户（包括已删除的） -->
    <select id="selectByPhoneIncludeDeleted" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE phone = #{phone}
        LIMIT 1
    </select>

    <!-- 统计租户用户数量 -->
    <select id="countByTenantId" resultType="java.lang.Long">
        SELECT COUNT(*) FROM sys_user
        WHERE tenant_id = #{tenantId} AND deleted = 0
    </select>

    <!-- 统计指定状态的用户数量 -->
    <select id="countByStatus" resultType="java.lang.Long">
        SELECT COUNT(*) FROM sys_user
        WHERE status = #{status} AND deleted = 0
    </select>

    <!-- 统计锁定状态的用户数量 -->
    <select id="countByLockStatus" resultType="java.lang.Long">
        SELECT COUNT(*) FROM sys_user
        WHERE lock_status = #{lockStatus} AND deleted = 0
    </select>

    <!-- 统计今日注册用户数量 -->
    <select id="countTodayRegistrations" resultType="java.lang.Long">
        SELECT COUNT(*) FROM sys_user
        WHERE create_time >= #{startTime} AND create_time &lt; #{endTime} AND deleted = 0
    </select>

    <!-- 统计本月注册用户数量 -->
    <select id="countMonthlyRegistrations" resultType="java.lang.Long">
        SELECT COUNT(*) FROM sys_user
        WHERE create_time >= #{startTime} AND create_time &lt; #{endTime} AND deleted = 0
    </select>

    <!-- 查询最近登录的用户 -->
    <select id="selectRecentLoginUsers" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE deleted = 0 AND last_login_time IS NOT NULL
        AND last_login_time >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        ORDER BY last_login_time DESC
        LIMIT #{limit}
    </select>

    <!-- 查询长时间未登录的用户 -->
    <select id="selectLongTimeNoLoginUsers" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM sys_user
        WHERE deleted = 0 AND status = 1
        AND (last_login_time IS NULL OR last_login_time &lt; DATE_SUB(NOW(), INTERVAL #{days} DAY))
        ORDER BY COALESCE(last_login_time, create_time) ASC
        LIMIT #{limit}
    </select>

    <!-- 查询用户登录趋势数据 -->
    <select id="selectLoginTrend" resultType="java.util.Map">
        SELECT 
            DATE(last_login_time) as login_date,
            COUNT(DISTINCT id) as login_count
        FROM sys_user
        WHERE deleted = 0 AND last_login_time >= #{startTime} AND last_login_time &lt;= #{endTime}
        GROUP BY DATE(last_login_time)
        ORDER BY login_date
    </select>

    <!-- 查询用户注册趋势数据 -->
    <select id="selectRegistrationTrend" resultType="java.util.Map">
        SELECT 
            DATE(create_time) as register_date,
            COUNT(*) as register_count
        FROM sys_user
        WHERE deleted = 0 AND create_time >= #{startTime} AND create_time &lt;= #{endTime}
        GROUP BY DATE(create_time)
        ORDER BY register_date
    </select>

    <!-- 查询活跃用户排行 -->
    <select id="selectActiveUserRanking" resultType="java.util.Map">
        SELECT 
            id,
            username,
            real_name,
            login_count,
            last_login_time
        FROM sys_user
        WHERE deleted = 0 AND status = 1 AND login_count > 0
        ORDER BY login_count DESC, last_login_time DESC
        LIMIT #{limit}
    </select>

    <!-- 批量软删除用户 -->
    <update id="batchSoftDelete">
        UPDATE sys_user
        SET deleted = 1, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 批量启用用户 -->
    <update id="batchEnable">
        UPDATE sys_user
        SET status = 1, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 批量禁用用户 -->
    <update id="batchDisable">
        UPDATE sys_user
        SET status = 0, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 批量锁定用户 -->
    <update id="batchLock">
        UPDATE sys_user
        SET lock_status = 1, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 批量解锁用户 -->
    <update id="batchUnlock">
        UPDATE sys_user
        SET lock_status = 0, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 更新用户登录信息 -->
    <update id="updateLoginInfo">
        UPDATE sys_user
        SET last_login_time = #{lastLoginTime},
            last_login_ip = #{lastLoginIp},
            login_count = #{loginCount},
            update_time = NOW()
        WHERE id = #{userId} AND deleted = 0
    </update>

    <!-- 更新用户密码 -->
    <update id="updatePassword">
        UPDATE sys_user
        SET password = #{password},
            password_update_time = #{passwordUpdateTime},
            update_by = #{updateBy},
            update_time = NOW()
        WHERE id = #{userId} AND deleted = 0
    </update>

    <!-- 批量插入用户 -->
    <insert id="batchInsert">
        INSERT INTO sys_user (
            tenant_id, username, password, email, phone, real_name, nickname, avatar,
            gender, birthday, status, lock_status, password_update_time, remarks,
            create_by, create_time
        ) VALUES
        <foreach collection="users" item="user" separator=",">
            (
                #{user.tenantId}, #{user.username}, #{user.password}, #{user.email}, #{user.phone},
                #{user.realName}, #{user.nickname}, #{user.avatar}, #{user.gender}, #{user.birthday},
                #{user.status}, #{user.lockStatus}, #{user.passwordUpdateTime}, #{user.remarks},
                #{user.createBy}, #{user.createTime}
            )
        </foreach>
    </insert>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateStatus">
        UPDATE sys_user
        SET status = #{status}, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 软删除过期用户 -->
    <update id="softDeleteExpiredUsers">
        UPDATE sys_user
        SET deleted = 1, update_by = #{updateBy}, update_time = NOW()
        WHERE deleted = 0 AND status = 0
        AND (last_login_time IS NULL OR last_login_time &lt; #{expireTime})
        AND create_time &lt; #{expireTime}
    </update>

    <!-- 清理用户敏感信息 -->
    <update id="cleanSensitiveInfo">
        UPDATE sys_user
        SET email = CONCAT('cleaned_', id, '@example.com'),
            phone = CONCAT('cleaned_', id),
            real_name = CONCAT('用户_', id),
            avatar = NULL,
            remarks = '已清理敏感信息'
        WHERE id IN
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
        AND deleted = 1
    </update>

</mapper>
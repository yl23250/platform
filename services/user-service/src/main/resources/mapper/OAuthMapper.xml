<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.biobt.user.mapper.OAuthMapper">

    <!-- OAuth客户端结果映射 -->
    <resultMap id="OAuthClientResultMap" type="com.biobt.user.domain.entity.OAuthClient">
        <id column="id" property="id"/>
        <result column="tenant_id" property="tenantId"/>
        <result column="client_id" property="clientId"/>
        <result column="client_secret" property="clientSecret"/>
        <result column="client_name" property="clientName"/>
        <result column="provider_type" property="providerType"/>
        <result column="authorization_uri" property="authorizationUri"/>
        <result column="token_uri" property="tokenUri"/>
        <result column="user_info_uri" property="userInfoUri"/>
        <result column="redirect_uri" property="redirectUri"/>
        <result column="scope" property="scope"/>
        <result column="response_type" property="responseType"/>
        <result column="grant_type" property="grantType"/>
        <result column="config_json" property="configJson"/>
        <result column="description" property="description"/>
        <result column="status" property="status"/>
        <result column="create_by" property="createBy"/>
        <result column="create_time" property="createTime"/>
        <result column="update_by" property="updateBy"/>
        <result column="update_time" property="updateTime"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <!-- 用户OAuth绑定结果映射 -->
    <resultMap id="UserOAuthResultMap" type="com.biobt.user.domain.entity.UserOAuth">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="provider_type" property="providerType"/>
        <result column="third_party_user_id" property="thirdPartyUserId"/>
        <result column="third_party_user_type" property="thirdPartyUserType"/>
        <result column="third_party_union_id" property="thirdPartyUnionId"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="email" property="email"/>
        <result column="avatar" property="avatar"/>
        <result column="access_token" property="accessToken"/>
        <result column="refresh_token" property="refreshToken"/>
        <result column="expires_at" property="expiresAt"/>
        <result column="raw_user_info" property="rawUserInfo"/>
        <result column="bind_time" property="bindTime"/>
        <result column="last_login_time" property="lastLoginTime"/>
        <result column="status" property="status"/>
        <result column="create_by" property="createBy"/>
        <result column="create_time" property="createTime"/>
        <result column="update_by" property="updateBy"/>
        <result column="update_time" property="updateTime"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <!-- OAuth客户端基础查询条件 -->
    <sql id="OAuthClientBaseWhere">
        <where>
            <if test="tenantId != null">
                AND oc.tenant_id = #{tenantId}
            </if>
            <if test="clientId != null and clientId != ''">
                AND oc.client_id = #{clientId}
            </if>
            <if test="clientName != null and clientName != ''">
                AND oc.client_name LIKE CONCAT('%', #{clientName}, '%')
            </if>
            <if test="providerType != null">
                AND oc.provider_type = #{providerType}
            </if>
            <if test="status != null">
                AND oc.status = #{status}
            </if>
            AND oc.deleted = 0
        </where>
    </sql>

    <!-- 根据客户端ID查询OAuth客户端 -->
    <select id="selectByClientId" resultMap="OAuthClientResultMap">
        SELECT * FROM sys_oauth_client oc
        WHERE oc.client_id = #{clientId}
        AND oc.deleted = 0
    </select>

    <!-- 分页查询OAuth客户端 -->
    <select id="selectOAuthClientPage" resultMap="OAuthClientResultMap">
        SELECT * FROM sys_oauth_client oc
        <include refid="OAuthClientBaseWhere"/>
        ORDER BY oc.create_time DESC
    </select>

    <!-- 查询启用的OAuth客户端 -->
    <select id="selectEnabledClients" resultMap="OAuthClientResultMap">
        SELECT * FROM sys_oauth_client
        WHERE status = 1
        AND deleted = 0
        ORDER BY create_time DESC
    </select>

    <!-- 根据提供商类型查询OAuth客户端 -->
    <select id="selectByProviderType" resultMap="OAuthClientResultMap">
        SELECT * FROM sys_oauth_client
        WHERE provider_type = #{providerType}
        AND deleted = 0
        ORDER BY create_time DESC
    </select>

    <!-- 批量启用OAuth客户端 -->
    <update id="batchEnable">
        UPDATE sys_oauth_client
        SET status = 1, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="clientIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 批量禁用OAuth客户端 -->
    <update id="batchDisable">
        UPDATE sys_oauth_client
        SET status = 0, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="clientIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 批量删除OAuth客户端 -->
    <update id="batchDelete">
        UPDATE sys_oauth_client
        SET deleted = 1, update_by = #{updateBy}, update_time = NOW()
        WHERE id IN
        <foreach collection="clientIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND deleted = 0
    </update>

    <!-- 检查客户端ID是否存在 -->
    <select id="existsByClientId" resultType="boolean">
        SELECT COUNT(1) > 0 FROM sys_oauth_client
        WHERE client_id = #{clientId}
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
        AND deleted = 0
    </select>

    <!-- 测试OAuth客户端配置 -->
    <select id="testOAuthClientConfig" resultType="map">
        SELECT 
            client_id as clientId,
            client_name as clientName,
            provider_type as providerType,
            authorization_uri as authorizationUri,
            token_uri as tokenUri,
            user_info_uri as userInfoUri,
            status,
            'OK' as testResult
        FROM sys_oauth_client
        WHERE client_id = #{clientId}
        AND deleted = 0
    </select>

    <!-- 统计OAuth客户端数量 -->
    <select id="countOAuthClients" resultType="long">
        SELECT COUNT(1) FROM sys_oauth_client oc
        <include refid="OAuthClientBaseWhere"/>
    </select>

    <!-- 统计绑定用户数量 -->
    <select id="countBoundUsers" resultType="long">
        SELECT COUNT(DISTINCT uo.user_id) FROM sys_user_oauth uo
        WHERE uo.provider_type = #{providerType}
        AND uo.status = 1
        AND uo.deleted = 0
    </select>

    <!-- 根据第三方用户ID查询用户OAuth绑定 -->
    <select id="selectUserOAuthByThirdPartyId" resultMap="UserOAuthResultMap">
        SELECT * FROM sys_user_oauth
        WHERE provider_type = #{providerType}
        AND third_party_user_id = #{thirdPartyUserId}
        AND third_party_user_type = #{thirdPartyUserType}
        AND deleted = 0
        ORDER BY bind_time DESC
        LIMIT 1
    </select>

    <!-- 根据用户ID查询OAuth绑定 -->
    <select id="selectUserOAuthBindings" resultMap="UserOAuthResultMap">
        SELECT * FROM sys_user_oauth
        WHERE user_id = #{userId}
        AND status = 1
        AND deleted = 0
        ORDER BY bind_time DESC
    </select>

    <!-- 根据用户ID和提供商类型查询OAuth绑定 -->
    <select id="selectUserOAuthByProvider" resultMap="UserOAuthResultMap">
        SELECT * FROM sys_user_oauth
        WHERE user_id = #{userId}
        AND provider_type = #{providerType}
        AND deleted = 0
        ORDER BY bind_time DESC
        LIMIT 1
    </select>

    <!-- 插入用户OAuth绑定 -->
    <insert id="insertUserOAuth" parameterType="com.biobt.user.domain.entity.UserOAuth">
        INSERT INTO sys_user_oauth (
            user_id, provider_type, third_party_user_id, third_party_user_type,
            third_party_union_id, username, nickname, email, avatar,
            access_token, refresh_token, expires_at, raw_user_info,
            bind_time, status, create_by, create_time
        ) VALUES (
            #{userId}, #{providerType}, #{thirdPartyUserId}, #{thirdPartyUserType},
            #{thirdPartyUnionId}, #{username}, #{nickname}, #{email}, #{avatar},
            #{accessToken}, #{refreshToken}, #{expiresAt}, #{rawUserInfo},
            #{bindTime}, #{status}, #{createBy}, #{createTime}
        )
    </insert>

    <!-- 更新用户OAuth绑定 -->
    <update id="updateUserOAuth" parameterType="com.biobt.user.domain.entity.UserOAuth">
        UPDATE sys_user_oauth
        SET username = #{username},
            nickname = #{nickname},
            email = #{email},
            avatar = #{avatar},
            access_token = #{accessToken},
            refresh_token = #{refreshToken},
            expires_at = #{expiresAt},
            raw_user_info = #{rawUserInfo},
            last_login_time = #{lastLoginTime},
            update_by = #{updateBy},
            update_time = #{updateTime}
        WHERE id = #{id}
        AND deleted = 0
    </update>

    <!-- 删除用户OAuth绑定 -->
    <delete id="deleteUserOAuth">
        DELETE FROM sys_user_oauth
        WHERE user_id = #{userId}
        AND provider_type = #{providerType}
    </delete>

    <!-- 更新OAuth令牌 -->
    <update id="updateOAuthToken">
        UPDATE sys_user_oauth
        SET access_token = #{accessToken},
            refresh_token = #{refreshToken},
            expires_at = #{expiresAt},
            last_login_time = NOW(),
            update_time = NOW()
        WHERE user_id = #{userId}
        AND provider_type = #{providerType}
        AND deleted = 0
    </update>

    <!-- 刷新OAuth令牌 -->
    <select id="refreshOAuthToken" resultType="map">
        SELECT 
            access_token as accessToken,
            refresh_token as refreshToken,
            expires_at as expiresAt,
            'SUCCESS' as refreshResult
        FROM sys_user_oauth
        WHERE user_id = #{userId}
        AND provider_type = #{providerType}
        AND refresh_token = #{refreshToken}
        AND deleted = 0
    </select>

    <!-- 检查用户OAuth绑定是否存在 -->
    <select id="existsUserOAuthBinding" resultType="boolean">
        SELECT COUNT(1) > 0 FROM sys_user_oauth
        WHERE user_id = #{userId}
        AND provider_type = #{providerType}
        AND deleted = 0
    </select>

    <!-- 检查第三方绑定是否存在 -->
    <select id="existsThirdPartyBinding" resultType="boolean">
        SELECT COUNT(1) > 0 FROM sys_user_oauth
        WHERE provider_type = #{providerType}
        AND third_party_user_id = #{thirdPartyUserId}
        AND third_party_user_type = #{thirdPartyUserType}
        <if test="excludeUserId != null">
            AND user_id != #{excludeUserId}
        </if>
        AND deleted = 0
    </select>

    <!-- 获取OAuth统计信息 -->
    <select id="getOAuthStatistics" resultType="map">
        SELECT 
            COUNT(DISTINCT uo.user_id) as totalUsers,
            COUNT(DISTINCT uo.provider_type) as totalProviders,
            COUNT(1) as totalBindings,
            COUNT(CASE WHEN uo.status = 1 THEN 1 END) as activeBindings,
            COUNT(CASE WHEN uo.last_login_time >= #{startTime} THEN 1 END) as recentLogins
        FROM sys_user_oauth uo
        WHERE uo.deleted = 0
        <if test="providerType != null">
            AND uo.provider_type = #{providerType}
        </if>
        <if test="startTime != null and endTime != null">
            AND uo.bind_time BETWEEN #{startTime} AND #{endTime}
        </if>
    </select>

    <!-- 分页查询OAuth登录日志 -->
    <select id="selectOAuthLoginLogs" resultType="map">
        SELECT 
            ol.id,
            ol.user_id as userId,
            ol.provider_type as providerType,
            ol.login_ip as loginIp,
            ol.user_agent as userAgent,
            ol.login_result as loginResult,
            ol.error_message as errorMessage,
            ol.login_time as loginTime,
            u.username,
            u.nickname
        FROM sys_oauth_login_log ol
        LEFT JOIN sys_user u ON ol.user_id = u.id
        WHERE 1 = 1
        <if test="userId != null">
            AND ol.user_id = #{userId}
        </if>
        <if test="providerType != null">
            AND ol.provider_type = #{providerType}
        </if>
        <if test="startTime != null and endTime != null">
            AND ol.login_time BETWEEN #{startTime} AND #{endTime}
        </if>
        ORDER BY ol.login_time DESC
    </select>

    <!-- 插入OAuth登录日志 -->
    <insert id="insertOAuthLoginLog">
        INSERT INTO sys_oauth_login_log (
            user_id, provider_type, login_ip, user_agent,
            login_result, error_message, login_time
        ) VALUES (
            #{userId}, #{providerType}, #{loginIp}, #{userAgent},
            #{loginResult}, #{errorMessage}, NOW()
        )
    </insert>

    <!-- 获取OAuth全局配置 -->
    <select id="getOAuthGlobalConfig" resultType="map">
        SELECT 
            config_key as configKey,
            config_value as configValue,
            description
        FROM sys_oauth_config
        WHERE status = 1
        AND deleted = 0
        ORDER BY sort_order ASC
    </select>

    <!-- 更新OAuth全局配置 -->
    <update id="updateOAuthGlobalConfig">
        UPDATE sys_oauth_config
        SET config_value = #{configValue},
            update_by = #{updateBy},
            update_time = NOW()
        WHERE config_key = #{configKey}
        AND deleted = 0
    </update>

    <!-- 插入OAuth全局配置 -->
    <insert id="insertOAuthGlobalConfig">
        INSERT INTO sys_oauth_config (
            config_key, config_value, description, status,
            create_by, create_time
        ) VALUES (
            #{configKey}, #{configValue}, #{description}, 1,
            #{createBy}, NOW()
        )
    </insert>

</mapper>